{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["body"],"id":"body","weight":1,"src":"body"}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Blog","n":1},"1":{"v":"\n\n## Welcome 👋\n\nThis is the Dendron Blog. \n\nDendron helps developers organize information at scale. \n\nThis blog is where we share our learnings and reflections from our journey! \n\n---\n\n![[blog.subscribe]]","n":0.189}}},{"i":2,"$":{"0":{"v":"Subscribe","n":1},"1":{"v":"\nEnjoy the blog? Subscribe to our newsletter!\n\n<form\n  action=\"https://buttondown.email/api/emails/embed-subscribe/dendron\"\n  method=\"post\"\n  target=\"popupwindow\"\n  onsubmit=\"window.open('https://buttondown.email/dendron', 'popupwindow')\"\n  class=\"embeddable-buttondown-form\"\n>\n  <label for=\"bd-email\">Enter your email</label>\n  <input type=\"email\" name=\"email\" id=\"bd-email\" />\n  <input type=\"submit\" value=\"Subscribe\" />\n  <p></p>\n</form>\n\n\nNewsletters not your thing? You can also follow us elsewhere on the interwebs:\n\n* Join [Dendron on Discord](https://discord.com/invite/xrKTUStHNZ)\n* Follow [Dendron on Twitter](https://twitter.com/dendronhq)\n* Checkout [Dendron on GitHub](https://github.com/dendronhq)\n\n---\n\nInterested in creating your own knowledge base using markdown, git, and VSCode? Get started with [Dendron](https://wiki.dendron.so/notes/678c77d9-ef2c-4537-97b5-64556d6337f1/) today.\n","n":0.122}}},{"i":3,"$":{"0":{"v":"2021","n":1}}},{"i":4,"$":{"0":{"v":"Highlights from VSCode 1.61","n":0.5},"1":{"v":"\n![vscode 1.61 highlights](https://org-dendron-public-assets.s3.amazonaws.com/images/vscode-filter-hue-40.png)\n\nThe open source VSCode project, along with VSCodium[^1], completed their latest monthly release with v1.61[^2]. For those of us that haven't been using the Insider's Build,[^3] it's time to look at what's new.\n\nAs a bonus for this release, Microsoft held a little [VSCode 1.61 Release Party](https://www.youtube.com/watch?v=G4jjCN8uQAg) on YouTube. Watch the recording, see the devs show off features, and feel like you were actually invited to a party!\n\n## Locked editor groups\n\n![Locked editor groups in Visual Studio Code](https://org-dendron-public-assets.s3.amazonaws.com/images/vscode-lock-groups.gif)\n\n> Note: this is an **experimental feature**.\n\nDon't lose track of a file or terminal you are bouncing back-and-forth between in your gigantic list of editor tabs: use [locked editor groups](https://code.visualstudio.com/updates/v1_61#_locked-editor-groups). These prevent VSCode from opening more editor tabs in a group (a collection of tabs).\n\nI like this feature, as I'm often opening new files in the wrong area of the screen. I want those side-by-side, computer!\n\n- Release Party: [Editor and workspace improvements demo](https://www.youtube.com/watch?v=G4jjCN8uQAg&t=1985s)\n\n## Split an editor without creating a new group\n\n![Split editors in groups in Visual Studio Code](https://org-dendron-public-assets.s3.amazonaws.com/images/vscode-split-in-group.gif)\n\nDo you find yourself looking at large files, and wish you could scroll down while staying in place elsewhere? Now you can, by doing the splits [without creating a new group](https://code.visualstudio.com/updates/v1_61#_split-an-editor-without-creating-a-new-group). Test it out with `View: Split Editor in Group` in the command palette (`Ctrl+Shift+P`) or with the keybinding shortcut: `Ctrl+K Ctrl+Shift+\\`. This is useful when converting pieces of code into functions, trimming fat, copy/pasting comment blocks, and whatever else your heart desires.\n\nNo new group means not having yet another tab open in your editor!\n\n- Release Party: [Editor and workspace improvements demo](https://www.youtube.com/watch?v=G4jjCN8uQAg&t=1985s)\n\n## Webview UI Toolkit for Visual Studio Code\n\nFor extension authors making use of the [webview API](https://code.visualstudio.com/api/extension-guides/webview) for customizable views in the editor, life is about to become easier: say hello to the [Webview UI Toolkit](https://code.visualstudio.com/updates/v1_61#_webview-ui-toolkit-for-visual-studio-code). This is an open-source component library, providing Visual Studio Code design language, which matches the look and feel of VSCode/VSCodium. This is compatible with your tech stack of choice, bet it React, Vue, or OMGNewJSFramework!\n\n- [Webview UI Toolkit Documentation](https://code.visualstudio.com/api/extension-guides/webview)\n- [Webview UI Toolkit repo](https://github.com/microsoft/vscode-webview-ui-toolkit)\n- Release Party: [Webview UI Toolkit Demo](https://www.youtube.com/watch?v=G4jjCN8uQAg&t=858s)\n\n## Other notables\n\n> General tip: Wondering what shortcuts are configured in VSCode? One shortcut to rule them all: `Ctrl+K Ctrl+S`\n- Or `Ctrl+Shift+P` -> **Preferences: Open Keyboard Shortcuts**\n\n- Confusion was caused by a new telemetry config option, `telemetry.telemetryLevel`, which would display that telemetry was enabled (even if it was previously disabled). The [full discussion can be found on GitHub](https://github.com/microsoft/vscode/issues/134660), which led to improvements being implemented in the `1.61.1` update.\n- [Platform-specific extensions](https://www.youtube.com/watch?v=G4jjCN8uQAg&t=170s): no longer try installing a MacOS-only extension on your Windows system, or vice-versa. That is, if the extension developer specifies the supported OS targets. This was previewed at the release party.\n- I often came back to my laptop to find that [my terminal was having a stroke in the VSCode editor](https://github.com/microsoft/vscode/issues/69665). This seems to be resolved!\n- The latest point releases[^4] include fixes for other problems, such as [high CPU consumption](https://github.com/microsoft/vscode/issues/134757). Make sure to keep up-to-date!\n\nI can't forget: want to take a look at VSCode in your web browser, without installing a thing? These are called _Virtual Workspaces_, such as [vscode.dev](https://vscode.dev/) and [github.dev](https://github.dev/). Reference the [VSCode Blog Post on vscode.dev](https://code.visualstudio.com/blogs/2021/10/20/vscode-dev) for a full rundown on bringing VSCode to the browser.\n\n---\n\n![[blog.subscribe]]\n\n[^1]: [Checkout VSCodium](https://vscodium.com/), for the truly MIT-licensed version of the VSCode IDE (with telemetry/tracking disabled).\n[^2]: [VSCode release notes for 1.61](https://code.visualstudio.com/updates/v1_61), along with release notes for previous monthly releases.\n[^3]: The [VSCode Insiders Build](https://code.visualstudio.com/insiders) allows users to get VSCode with new features as soon as they are available, rather than at the monthly cadence.\n[^4]: Issues resolved in point releases, referred to as \"Recovery\" releases, can be found on GitHub: [`1.61.1`](https://github.com/microsoft/vscode/issues?q=is%3Aissue+milestone%3A%22September+2021+Recovery%22+is%3Aclosed) and [`1.61.2`](https://github.com/microsoft/vscode/issues?q=is%3Aissue+milestone%3A%22September+2021+Recovery+2%22+is%3Aclosed).","n":0.041}}},{"i":5,"$":{"0":{"v":"Best Mobile Note-Taking Apps for Markdown","n":0.408},"1":{"v":"\n![Mobile phone sitting on top of a journal](https://org-dendron-public-assets.s3.amazonaws.com/images/blog-mobile-editor-header.png)\n\nOn the desktop, Markdown notes can be taken in any plain-text editor of choice. If you're using [Dendron](https://www.dendron.so/), you can use VSCode/VSCodium as well as a suite of [powerful commands](https://wiki.dendron.so/notes/eea2b078-1acc-4071-a14e-18299fc28f47.html) to manage your notes. Though, what happens when you walk out the door? It turns out that your phone can work with Markdown, too!\n\nWhat we're looking at today:\n\n- [Obsidian](#obsidian)\n- [GitJournal](#gitjournal)\n- [Markor](#markor)\n- [iA Writer](#ia-writer)\n- [Other apps of interest](#other-apps-of-interest)\n  - [Markdown notes](#markdown-notes)\n  - [Git clients](#git-clients)\n- [Last thoughts](#final-thoughts)\n\n## Obsidian\n\n![Editor and markdown-preview screenshots, on Android, for Obsidian](https://org-dendron-public-assets.s3.amazonaws.com/images/blog-obsidian-screenshots.png)\n\n> _\"Obsidian is a powerful knowledge base on top of a local folder of plain text Markdown files.\"_\n\n- **Cost:** Free for personal use (or [paid options](https://obsidian.md/pricing) for business use and other features)\n- **OS:** Android, iOS / iPad / Mac, Windows\n- **Open Source:** No\n- **Built-in git integration:** No\n\n_[Obsidian](https://obsidian.md/mobile)_ is a PKM (Personal Knowledge Management) tool that provides a sleek UI to Markdown files. It had the best mobile experience, for me, out of the apps I tested. Though it doesn't have git support built-in, other mobile apps can assist in providing that backend. I recommend [MGit (Android)](https://manichord.com/projects/mgit.html).\n\nObsidian uses [wikilink style links](https://wiki.dendron.so/notes/9MZBqhrijEM4QpZRa5t08/) (ex. `[[my.other.note]]`), like Dendron, which is a nice plus.\n\nPaid options can assist note-takers with automatic syncing, publishing of notes, and other perks. Note that obsidian is free for personal use but requires at least a [paid commercial license for business use](https://help.obsidian.md/Licenses+%26+add-on+services/Commercial+license).\n\n## GitJournal\n\n![Editor and markdown-preview screenshots, on Android, for GitJournal](https://org-dendron-public-assets.s3.amazonaws.com/images/blog-gitjournal-screenshots.png)\n\n> _\"Mobile first Markdown Notes integrated with Git.\"_\n\n- **Cost:** Free (or a [paid Pro option](https://gitjournal.io/pricing/))\n- **OS:** Android, iOS\n- **Open Source:** Yes ([AGPL-3.0](https://github.com/GitJournal/GitJournal/blob/master/LICENSE))\n- **Built-in git integration:** Yes\n\n_[GitJournal](https://gitjournal.io/)_ has gained quite a bit of interest: it works on your mobile device of choice, free to jump into, open to contributions, and can sync notes to a repo (or multiple repos with the Pro version). The project is built with [Flutter](https://flutter.dev/), making life easier when it comes to multiple-platforms as target exports.\n\nGitJournal also supports wikilinks and can therefore be used with Dendron and Obsidian.\n\nI'm really interested in seeing where GitJournal goes. I couldn't find other mobile apps that covered both notes in Markdown and git-integration, without needing to juggle multiple apps. With my [Dendron vaults](https://wiki.dendron.so/notes/6682fca0-65ed-402c-8634-94cd51463cc4.html), I mostly take [scratch notes](https://wiki.dendron.so/notes/5c213aa6-e4ba-49e8-85c5-1bdcb33ce202.html#scratch-note) or edit already-existing notes when using my phone. For more extensive usage, I hop on the laptop.\n\nI will say, though, that I ran into so many problems in trying to get my first demo repository setup that I stopped using GitJournal. Other users are running into issues at the moment having to do with syncing and setup, some of which might be tied to [a hard-coded expectation of branch names](https://github.com/GitJournal/GitJournal/issues/546) (such as `master`). I now use `mgit` for managing my repos, and Obsidian for managing notes.\n\n## iA Writer\n\n![Editor and markdown-preview screenshots, on Android, for iA Writer](https://org-dendron-public-assets.s3.amazonaws.com/images/blog-iawriter-screenshots.png)\n\n> _\"iA Writer offers a unique writing experience that lets you concentrate and clarify your message. Used by half a million people worldwide, its powerful interface is crafted to cut out noise, let you focus on what you want to say, and help you structure and trim your text.\"_\n\n- **Cost:** [$29.99](https://ia.net/downloads#apps)\n- **OS:** Android, iOS / iPad / Mac, Windows\n- **Open Source:** No\n- **Built-in git integration:** No\n\n_[iA Writer](https://ia.net/writer)_ was initially released 10 years ago, and has since evolved to work on multiple platforms. Though it doesn't have git integration, other apps like **GitJournal** or **MGit (Android)** can be used for that.\n\nWant to feel like a designer, in a sleek interface with minimalist and Apple-like branding? This is made for you. The editor can work across all devices: phones, tablets, and desktops.\n\nBeing a feature-full piece of software, including:\n\n- Style-checking to help improve note quality\n- Can export to Word\n- A larger list of all-the-things can be found on their [main landing page](https://ia.net/writer).\n\n## Markor\n\n![Editor and markdown-preview screenshots, on Android, for Markor](https://org-dendron-public-assets.s3.amazonaws.com/images/blog-markor-screenshots.png)\n\n> _\"Markor is a TextEditor for Android. This project aims to make an editor that is versatile, flexible, and lightweight. Markor utilizes simple markup formats like Markdown and todo.txt for note-taking and list management.\"_\n\n- **Cost:** Free\n- **OS:** Android\n- **Open Source:** Yes ([Apache 2.0, w/ special note on commercial license](https://github.com/gsantner/markor/blob/master/LICENSE.txt))\n- **Built-in git integration:** No\n\n[Markor](https://gsantner.net/project/markor.html) is without git integration, but can be combined with an app like **GitJournal** or [MGit (Android)](https://manichord.com/projects/mgit.html) for syncing to a source repo.\n\nI liked both the _editor_ and _preview_ rendering in Markor more than the other apps I tried. Syntax highlighting is a nice touch while editing, and the previews look cleaner than both iA Writer and GitJournal.\n\nThough, the cons here are that Markor only works on Android and needs another app to handle git integration. Outside that, I can quickly see why thousands of ratings have led to nearly a 5/5 on Google Play.\n\n## Other apps of interest\n\nThere are many mobile note-taking solutions that work with Markdown. Below are some additional tools that [Dendrologists](https://wiki.dendron.so/notes/7c00d606-7b75-4d28-b563-d75f33f8e0d7.html#dendrologist) have used for Markdown on the go.\n\n### Markdown notes\n\n- [Working Copy (iOS)](https://workingcopyapp.com/)\n  - Git client, paid (free version can't push commits). This app comes up quite a bit for iOS users and within the [Dendron Discord](https://discord.com/invite/xrKTUStHNZ) in our `#mobile` channel, so I'm listing it at the top.\n- [Noteless (Android)](https://github.com/redsolver/noteless)\n  - Open source, free, includes AsciiMath, KaTeX, mermaidjs\n  - An experimental feature option supports Dendron formatted wiki links\n- [Neutrinote (Android)](https://appml.github.io/nano/)\n  - Open source, free, includes LaTeX / math rendering support\n- [Editorial (iOS)](https://omz-software.com/editorial/)\n  - iPad + iPhone, paid, integrated Python bonus\n- [Taio (iOS)](https://taio.app/)\n  - iPad + iPhone + Mac, free (or paid option has perks, such as Javascript-supported actions)\n- [Textastic (iOS)](https://www.textasticapp.com/)\n  - iPad + iPhone + Mac, paid, code-highlighting, ssh/FTP/SFTP/Dropbox/Google Drive support\n\n### Git clients\n\n- [MGit (Android)](https://manichord.com/projects/mgit.html)\n  - Git client, open source, free. There is a reason I repeatedly mention it in this article, when it comes to Android users, because it handles git repos well.\n- [Working Copy (iOS)](https://workingcopyapp.com/)\n  - Git client, paid (free version can't push commits)\n\n## Final thoughts\n\nUsers may also be interested in future development around the [GitHub](https://github.com/mobile/) mobile client, which currently does _not_ support being able to edit or contribute new files. For now, people can use the app to post \"LGTM\" to PRs, add thumbs-down emojis to issues, and get notified when your PRs are rejected.\n\n`git` is not the only way to sync/backup your notes, since tools like Dropbox, Google Drive, iCloud, and Keybase can also help provide that functionality. I, and other Dendrologists, have a bias toward git due to a variety of reasons:\n\n- Following the [Docs as Code](https://www.writethedocs.org/guide/docs-as-code/) approach\n- Treating all documentation as part of a distributed wiki system that can import docs, from any source, into a single workspace\n- `git` versioning\n- Anyone that has used GitHub, GitLab, or other git-hosting solutions will have `git` installed\n\nIf I had to choose what combinations to use, on Android, I'd recommend **Obsidian** with **MGit (Android)**. The two, together, have worked very well for me. I'm also a fan of setting up SSH keys to have project/repo-limited permissions as [Deploy Keys](https://docs.github.com/en/developers/overview/managing-deploy-keys#deploy-keys) on GitHub (with `Allow write access` enabled). This prevents users from setting up SSH keys with user-wide permissions across GitHub.\n\n---\n\n![[blog.subscribe]]","n":0.029}}},{"i":6,"$":{"0":{"v":"Writing a Visual Studio Code Completion Provider","n":0.378},"1":{"v":"\n![A photo of a developer with a laptop and 2 monitors, from a top-down view. Monitors display Visual Studio Code windows.](https://org-dendron-public-assets.s3.amazonaws.com/images/pexels-thisisengineering-3861972.jpg)\n\nVisual Studio Code (VSCode) provides many powerful features for extension developers. Autocomplete, warnings, tasks, and many more features are included out-of-the-box and are available for extension developers to take advantage of. However, figuring out how you can take advantage of these features as an extension developer can require digging through API documentation to learn the exact behavior. Using the API incorrectly can lead to issues that are hard to debug, as I learned working on the block autocomplete feature for Dendron.\n\nThis post is an overview of VSCode autocomplete —also called intellisense— feature from the viewpoint of an extension developer. I especially want to highlight a few pitfalls: VSCode provides defaults for many of the options around autocomplete, but the behavior of these defaults can be confusing if you don't know what they are.\n\n### Entry point\n\nYour entry point into adding an autocomplete feature is `languages.registerCompletionItemProvider`. This allows you to attach a function that will generate the options when requested.\n\n```ts\nlanguages.registerCompletionItemProvider(\n  \"markdown\",\n  {\n    provideCompletionItems: provideBlockCompletionItems,\n  },\n  \"#\",\n  \"^\"\n);\n```\n\nAbove is how Dendron attaches the completion provider for blocks. This part is straightforward, although note the symbols at the end. These are the symbols that when written will trigger your completion provider automatically. While you can define multiple symbols, each symbol has to be a single character. If An overview & tutorial of writing VSCode completion providers (intellisense) as an extension developer\n\nNext, let's take a look at the completion function. Here is the function signature for Dendron:\n\n```ts\nexport async function provideBlockCompletionItems(\n  document: TextDocument,\n  position: Position,\n  token?: CancellationToken\n): Promise<CompletionItem[] | undefined> {\n```\n\n`document` and `position` are straightforward. `token` is used to cancel completions, for example if the user hits cancel while waiting for the completions. Key thing about the token is to remember that javascript is single-threaded: the token won't suddenly get cancelled in the middle of your function. The only point where it can become cancelled is if you `await` for something and yield the execution. This means you don't have to check if the token is cancelled everywhere in your code, just check after any `await`ed operation that might take a significant amount of time. Checking the token is easy, `if (token?.isCancellationRequested) return;` is enough.\n\nThe more important thing here is how the function gets called. One way the function will get called is if the user types one of the trigger symbols you registered. Another way is if the user hits the key for \"Trigger Suggest\" (`Ctrl+Space` by default), *all* registered completion providers for this language will run. Crucially, this means your completion provider may be activated at any point in the document, with or without your trigger key.\nIt's up to your implementation to check if the current `position` is somewhere that this completion is appropriate for, and `return;` if not. Let's look at a simplified version of how Dendron handles this for the autocomplete:\n\n```ts\nlet found: RegExpMatchArray | undefined;\nconst line = document.lineAt(position.line);\n\n// There may be multiple links within this line\nconst matches = line.text.matchAll(LINK_WITH_BLOCK_REGEX);\nfor (const match of matches) {\n  if (_.isUndefined(match.groups) || _.isUndefined(match.index)) continue;\n  const { entireLink } = match.groups;\n  // If the current position is within this link, then we are trying to complete it\n  if (\n      match.index <= position.character &&\n      position.character <= match.index + entireLink.length\n  ) {\n      found = match;\n  }\n}\nif (_.isUndefined(found)) return;\n```\n\nThe gist of it is that we get the text for the current line, and check if the current position is inside a link with a block that we can complete.\n\n### `CompletionItem`\n#### `label`\n\nA key part of the completion item is the label. The label is not only displayed for the completion items, but it's also used as a default for many of the options in a `CompletionItem`. The text that gets inserted when the user selects something, deciding the order in which these items are displayed, and how these options are narrowed when the user types are all based on the label by default.\n\n![A screen shot displaying several completion items. \"journal.2021.06\" is written within brackets, which is also highlighted in all completion items.](https://i.imgur.com/Qu2LPJR.png)\n\n#### `range`\n\nThe range is the most confusing part of the `CompletionItem` in my opinion. The range determines 2 things: where the selected item will be inserted, and also what counts as \"stuff that the user typed to narrow the items\".\n\nFor the first use of range, whatever range you provide will be replaced with the `insertText` (or missing that, `label`) of the completion item. If you have nothing to replace, the range can have `start === end` in which case the text is just inserted at that point.\n\nThe second use of range makes things a bit more tricky. Because the range determines what counts as \"stuff the user typed\", you have to be careful about what you include in the range. For example, Dendron's autocomplete allows users to type `[[^` to get all blocks within a text as autocomplete options.\n\nThe problem? The user needs to type `^` to activate the completion, but `^` is not part of any completion item, and also `^` needs to be removed once an item is selected because the text is supposed to look like `[[#^something]]` after the completion. \n\nWhile it would be convenient to just set the range to anything within the brackets, this will result in all completion items being narrowed out because `^` will also count as \"stuff the user typed to narrow the items\".\n\nSomething important to bring up here is the default for `range`. If you look\ninto the docs, you'll see that the default is the \"range of the current word\",\neffectively the output of `TextDocument.getWordRangeAtPosition` function.\n`getWordRangeAtPosition` allows you to set a custom regex to select what\n\"current word\" means, so this might sound like a good way to calculate the\nrange. While this would work in some cases, I found that\n`getWordRangeAtPosition` is extremely inefficient if your regex is more complex\nthan `[...]+`. Especially using lookaheads or lookbehinds causes VSCode to\ncompletely hang. I'd recommend avoiding this function unless the default mostly\nworks for you.\n\n#### `sortText`\n\nThis field is used to determine in what order the completion items are *initially* ordered. Initially is important here, as VSCode may move the items around once the user starts typing if it decides some items match the text better.\n\nThe annoying part about `sortText`: it simply sorts the items using basic string sorting. Issue here being that if you have a loop to generate your completion items, you can't just use the index to sort the items.\n\n```ts\nblocks.map((block, index) => {\n  // These won't sort right, because \"11\" < \"9\" in string sort\n  return {\n    label: block.text,\n    sortText: String(index),\n  };\n}\n```\n\nThe fix is to pad your `sortText`.\n\n```ts\nsortText: String(index).padStart(5, '0'),\n```\n\nThis is not a perfect fix of course, but it's unlikely that you'll have over 99999 completion items.\n\n#### `insertText`\n\nThis is the text to be inserted when the user selects a completion. By default\nit's set to the label, but you'll want to set this if you are using the label to\ndisplay something more informative to the user. For example, when completing\nblocks, Dendron uses the label to display the actual line the user is selecting.\nBut the text we need to insert into the wikilink is not the same as the line\nitself, so we set this to get it to link to the right place.\n\n```ts\ninsertText: `#${AnchorUtils.anchor2string(anchor)}`,\n```\n\n#### `additionalTextEdits`\n\n`insertText` replaces the part of the text that is selected by the `range`. This\nis actually quite limiting: As I mentioned before, `range` not only selects the\nwhat will be replaced but also what VSCode considers \"typed by the user to\nnarrow options\". What if you want something to be replaced along with what the\nuser typed, but you don't want it to be used in narrowing?\n\nFor example, when autocompleting for blocks in Dendron the user might type\n`[[^some-header`, but the resulting link will look like\n`[[#some-header-text-here]]`. We need to remove `^` along with whatever the user\ntyped, but if we set the `range` to include it then the narrowing would be\nthrown off because it would look for options where the label includes `^`.\nTo get around this, we use the `additionalTextEdits` to automatically remove the\n`^` part.\n\nAnother use for `additionalTextEdits` is to insert text somewhere completely\ndifferent in the document. Think of auto-imports for some languages, where you\ntype something and the language automatically adds `import ...`. Or in Dendron,\nif the user selects a block that doesn't already have a block anchor when\ncompleting blocks, we need to insert a block anchor there. `additionalTextEdits`\nhave no limits to where they can put the text, as long as it's within the same\ndocument. In any case, let's see what this code looks like:\n\n```ts\nconst edits: TextEdit[] = [];\n\nif (found.groups.trigger) edits.push(\n  new TextEdit(\n    new Range(\n      position.line, found.index + 2,\n      position.line, found.index + 2 + found.groups.trigger.length\n    ),\n    \"\"\n  )\n);\n\nif (_.isUndefined(anchor)) {\n  anchor = {\n    type: \"block\",\n    value: genUUIDInsecure(),\n  };\n  const blockPosition = VSCodeUtils.point2VSCodePosition(\n    block.position.end\n  );\n  edits.push(\n    new TextEdit(\n      new Range(blockPosition, blockPosition),\n      ` ${AnchorUtils.anchor2string(anchor)}`\n    )\n  );\n}\n```\n\nThe first part adds a text edit to remove the `^` part the user typed by\ncalculating the range from a regex match, then replacing it with `\"\"`. The\nsecond part adds the ` ^...` part to a block by calculating the range from the\nparsed document.\n\n## Conclusion\n\nAutocomplete is a ubiquitous feature in text editing today, both for writing\nnatural languages and coding. It is an incredibly easy-to-use yet powerful\nfeature for your users, and it enables unmatched user experiences when done\nright. But when done wrong, it can cause a disconnect and confusion around your\nproduct. At Dendron, we strive for the former and hope that the learnings from\nour experience will help you do the same.\n\n---\n\n![[blog.subscribe]]","n":0.025}}},{"i":7,"$":{"0":{"v":"Highlights from VSCode 1.59","n":0.5},"1":{"v":"\n![Visual Studio Code logo](https://org-dendron-public-assets.s3.amazonaws.com/images/vscode-release-highlights-159.png)\n\nThe open source VSCode project, along with VSCodium[^1], completed their latest monthly release with v1.59[^2]. Let's take a look at some features that the insiders build[^3] had their impatient, bleeding-edge hands on (before we all forget what 1.59 brought before the upcoming August 2021 release).\n\n## Share view state\n\nVSCode users are often bouncing around different files in their workspaces. By default, if you close out a file tab, VSCode doesn't track where you were in that file. This can be annoying if you didn't mean to close out the file, or because you were playing whack-a-mole with the new workspace trust popups.\n\nSay hello to shared view states across editor groups[^4]. Editor groups are the windows of tab collections within the VSCode editor[^5] that grow whenever **Split Editor/Open to the Side** commands are used. These groups can remember your past so that your rampant mind doesn't need to.\n\n![GIF showing the share view state feature with The House on The Borderland, by William Hope Hodgson](https://org-dendron-public-assets.s3.amazonaws.com/images/vscode-share-view-state.gif)\n\n> Ah yes, that's right, I left off at the pig people.[^6]\n\n## Terminal magic tricks\n\nBy default, a new terminal can be created with `Ctrl+Tilde(~)`, where it pops up in the bottom as an entryway into the powerful, dark underbelly of shells. VSCode 1.59 highlights some wizardry alternatives.\n\n### Create terminals to the side\n\nAre you one of those people that spins a monitor into portrait mode, because of some insatiable love for 90<sup>o</sup> angles? Maybe you simply prefer tall terminals? `Ctrl+Shift+P` and `Terminal: Create Terminal in Editor Area to the Side`[^7], will be exactly what you're looking for.\n\n![GIF showing the creation of terminals to the side, instead of defaulting to the bottom](https://org-dendron-public-assets.s3.amazonaws.com/images/vscode-side-terminals.gif)\n\n### Drag and drop terminals across windows\n\nHow many VSCode windows are sitting open on your desktop? Are you taking notes in one workspace, while continuing your commands in a separate VSCode window? Make your life easier, retain all your in-shell variables, and drag the active terminal from one window to another.\n\nThis can be helpful when improving the documentation in one window as active development is happening in another.\n\n![GIF showing the drag-and-drop feature of terminals into different VSCode windows](https://org-dendron-public-assets.s3.amazonaws.com/images/vscode-drag-drop-terminals.gif)\n\nAn excellent bonus: remember when typos were just typos? The worst thing that could happen was other people making fun of your lack of oxford comma's. Now, with terminal editors, your typo can shutdown your production database! Fun!\n\n## Live preview\n\nThe _Live Preview_ extension[^8], originally released in June, has continued along. For users working in JavaScript land, **Live Preview: Show Debug Preview** ensures a built-in JavaScript debugger[^9].\n\nNote that this extension has the warning:\n\n> **WARNING: this is extension is still under development!**\n\nFor the brave javascripters among you all, who want the beautiful reflections of instant-progress within the editor, take it for a test drive. Report any issues to the [microsoft/vscode-livepreview](https://github.com/microsoft/vscode-livepreview) repo.\n\n## Other notables\n\n> General tip: Wondering what shortcuts are configured in VSCode? One shortcut to rule them all: `Ctrl+K Ctrl+S`\n- Or `Ctrl+Shift+P` -> **Preferences: Open Keyboard Shortcuts**\n\n- If you're using an M1 Mac, you should get the latest VSCode 1.59.1[^10] point release, as it addresses a bug where VSCode may crash.\n- A _preview feature_[^11] has been added for automatic language detection in unsaved/untitled files. `experimentalLanguageDetection`[^12] (search against settings via `Ctrl+Comma`) can be set to `true`, which uses an ML model from `yoeo/Guesslang`[^13] with the open-source ML library `TensorFlow.js`[^14]. VSCode is planning for this feature to be `true` by default in the future, so that code is recognized out-of-box, instead of always relying on the file extension or force **Change Language Mode** (`Ctrl+K M`).\n\n---\n\n![[blog.subscribe]]\n\n[^1]: [Checkout VSCodium](https://vscodium.com/), for the truly MIT-licensed version of the VSCode IDE (with telemetry/tracking disabled).\n[^2]: [VSCode release notes for 1.59](https://code.visualstudio.com/updates/v1_59), along with release notes for previous monthly releases.\n[^3]: The [VSCode Insiders Build](https://code.visualstudio.com/insiders) allows users to get VSCode with new features as soon as they are available, rather than at the monthly cadence.\n[^4]: Read about [Shared View State Across Editor Groups](https://code.visualstudio.com/updates/v1_59#_share-view-state-across-editor-groups) in the release notes.\n[^5]: Read about [Editor Groups](https://code.visualstudio.com/docs/getstarted/userinterface#_editor-groups) in the VSCode docs.\n[^6]: [The House on the Borderland, by William Hope Hodgson](https://www.gutenberg.org/ebooks/10002), is a freely available novel via [Project Gutenberg](https://www.gutenberg.org/about/).\n[^7]: `workbench.action.createTerminalEditorSide` provides this functionality, and is an alternative that can be entered after `Ctrl+Shift+P`.\n[^8]: [Live Preview](https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server) is developed by Microsoft, and can be installed via `Ctrl+P` and `ext install ms-vscode.live-server`.\n[^9]: For more information, see [latest highlights around _Live Preview_](https://code.visualstudio.com/updates/v1_59#_live-preview). Observe the animated bunny stuck waving in an infinite loop, trapped in a simulation. More in-depth information (on the extension, not the bunny) can be found directly within the [extension release notes](https://github.com/microsoft/vscode-livepreview/blob/main/release_notes/july-2021.md).\n[^10]: See all [issues addressed in VSCode 1.59.1 on GitHub](https://github.com/microsoft/vscode/issues?q=is%3Aissue+milestone%3A%22July+2021+Recovery%22+is%3Aclosed). For the macOS bug fix, see [Perma-hang/crash on M1 MBP with universal build](https://github.com/microsoft/vscode/issues/130222).\n[^11]: Normally, release notes include this snippet about [preview features and what they are](https://code.visualstudio.com/updates/v1_41#_preview-features): _\"**Preview features** are not ready for release but are functional enough to use. We welcome your early feedback while they are under development.\"_\n[^12]: Read about [Automatic Language Detection of Untitled Files](https://code.visualstudio.com/updates/v1_59#_automatic-language-detection-of-untitled-files) in the release notes.\n[^13]: [Guesslang](https://github.com/yoeo/guesslang), by GitHub user [yoeo](https://github.com/yoeo), is an MIT-licensed ML model and Python package that can help detect the programming language of source code. It's been trained on over a million source code files.\n[^14]: [TensorFlow.js](https://www.tensorflow.org/js/) makes development and usage of ML available within the browser or [Node.js](https://nodejs.org/en/). For more about TensorFlow, checkout the [_Why TensorFlow_ page](https://www.tensorflow.org/about).","n":0.034}}},{"i":8,"$":{"0":{"v":"The Dendron Seed Bank - A Public Registry for General Knowledge","n":0.302},"1":{"v":"\n![Several plants in various stages of early growth and seedlings](https://org-dendron-public-assets.s3.amazonaws.com/images/markus-spiske-4PG6wLlVag4-unsplash.jpg)\n\n\n## Summary\nDendron is the note-taking tool that helps **people** manage **any amount of information**. \n\nToday, we are announcing the preview of the Seed Bank - a public registry for general knowledge. \n\nIf you're familiar with package managers like npm, it's kind of like that but for any sort of information, not just code.\n\nThe seed bank makes it easy to **discover, reference, and grow** information on things that you care about. This could be a guide on [personal knowledge management](http://pkm.dendron.so/) or a reference to everything [AWS](https://aws.dendron.so/)\n\nWith the seed bank, you no longer need to start from zero when looking stuff up - rather, you have a single source of reference that you can grow over time.\n\n## Use Case\n\nThis is best demonstrated with an example. You are Jenny, a DevOps engineer that is responsible for managing all deployments, ETL pipelines, and general *backend-ish things* at a recently funded tech startup. \n\nYou live in the shell and dream in POSIX but even you don't remember all the arcane incantations to command the shell in all situations.\n\n![I don't know what's worse--the fact that after 15 years of using tar I still can't keep the flags straight, or that after 15 years of technological advancement I'm still mucking with tar flags that were 15 years old when I started.](https://imgs.xkcd.com/comics/tar.png)\n> \"[tar](https://xkcd.com/1168/)\", by Randall Munroe, licensed under Creative Commons Attribution-NonCommercial 2.5 License\n\nYou already use Dendron as a daily journal to track your tasks and you are tired of using google to find the same `curl` option to `POST` data that you looked up at least a dozen times before. You take a visit to the seed bank. \n\nBecause the seed bank is currently in preview, you open up a shell and navigate to your workspace. Since you already have dendron open in vscode, you run `> Create new Integrated Terminal` to open up a shell. \n\nBecause you already have the [dendron-cli](https://wiki.dendron.so/notes/23a1b942-99af-45c8-8116-4f4bb7dccd21.html) installed, you can run the following command\n\n```\ndendron seed add dendron.tldr\n```\n\nThis adds [tldr](https://github.com/tldr-pages/tldr), \"collaborative cheatsheets for console commands\", to your workspace. \n\nAdding `tldr` triggers a re-indexing of the newly added files  - the first-time installation will take some time but subsequent initializations will be instant. Once indexing is done, you can now reference `tldr` content in a few keystrokes. \n\n![tldr tar and curl](https://org-dendron-public-assets.s3.amazonaws.com/images/tldr-lookup.gif)\n\nYou can create [wiki links](https://wiki.dendron.so/notes/3472226a-ff3c-432d-bf5d-10926f39f6c2.html) of commonly used commands in your daily journal for even easier access.\n\nOver time, this will create a list of backlinks that will show you the commands you lookup the most often.\n\n![tldr backlinks with tar commands](https://org-dendron-public-assets.s3.amazonaws.com/images/tldr-backlinks.gif)\n\nYour colleagues are flabbergasted at the speed at which you diagnose network issues. They ask you for help and you respond with a series of links. These links are generated with a shortcut and link out to the published version of the TLDR seed. \n\n\n![](https://org-dendron-public-assets.s3.amazonaws.com/images/tldr-share-link.gif)\n\nThe story doesn't stop here. Over time, you end up publishing your own seeds on what you learned about scaling microservices. There are picked up by engineers from other companies and soon become the go-to guide for anyone doing microservices. \n\n## Next\n\nIt is still early days for the seed bank but hopefully, the above scenario was enough to give you some ideas. You can find the documentation to get started with the seed bank [here](https://wiki.dendron.so/notes/6ff8cbb6-e4b8-449b-a967-277b76e4ecef.html)\n\nWith Dendron, we took elements of programming tools (eg. lookup, refactor, schemas) and applied it to the organization of general knowledge. With the seed bank, we are taking aspects of programming languages themselves (eg. composability, modularity) and applying it to knowledge. \n\nOur mission is to help **people** organize and make sense of any amount of information.  We are doing this by building the [IDE](https://en.wikipedia.org/wiki/Integrated_development_environment) for general knowledge.\n\nPlease give it a try and let us know what you think on [discord](https://discord.gg/AE3NRw9), [twitter](https://twitter.com/dendronhq) or [github](https://github.com/dendronhq/dendron/discussions).\n\n---\n\n![[blog.subscribe]]","n":0.04}}},{"i":9,"$":{"0":{"v":"Dendron Inc","n":0.707},"1":{"v":"\nI read the following anecdote in an Albert Einstein biography back in the day. A reporter asked Einstein about the value of some physical constant and Einstein replied that he didn't know. The reporter was flabbergasted but Einstein replied that he didn't want to bother memorizing something that he could easily look up.\n\nThis anecdote has always stuck with me because we live in a world where **everything** can be \"looked up.” In such a world, what does it even mean to know something? And how do you apply that knowledge when there's just so much of it?\n\nIt was trying to answer these questions that led me to experiment and ultimately built my [own system for note-taking](https://www.kevinslin.com/notes/3dd58f62-fee5-4f93-b9f1-b0f0f59a9b64.html). Much like ML, the insight I had is that general knowledge, once cleaned up and structured, becomes orders of magnitude more useful.\n\nA year ago, I launched [Dendron](https://wiki.dendron.so/) to see if this system I developed would work for anyone else - now 3000 commits and 27,000 downloads later, I'm happy to say that it does. I get a thrill every time someone messages me about how they're using Dendron - whether it's planning out their next Dungeons and Dragons game or it's using Dendron as the central knowledge base for both work and home.\n\nWhat makes Dendron powerful is our ability to let users organize their information in a way that's most useful to them. Dendron takes many of the affordances developers are used to in code, like abstractions ([note references](https://wiki.dendron.so/notes/f1af56bb-db27-47ae-8406-61a98de6c78c.html)), [refactoring](https://wiki.dendron.so/notes/eea2b078-1acc-4071-a14e-18299fc28f47.html#refactor-hierarchy), and [symbol lookup](https://wiki.dendron.so/notes/a7c3a810-28c8-4b47-96a6-8156b1524af3.html) and applying it to general knowledge.\n\nThese capabilities combined with our model of working over plaintext markdown and our open source license means that your knowledge is always yours, available instantly and in any way you want it.\n\nMoving forward, we will further expand on Dendron's capabilities to make it a full-blown **IDE for general knowledge.** To pursue this goal, we've raised [$2 million in seed capital](https://www.geekwire.com/2021/take-note-amazon-vets-raise-2m-dendron-tool-manage-large-amounts-information/) from [FUSE](https://fuse.vc/), [Founders’ Co-Op](https://www.founderscoop.com/), [First Rays](https://www.firstraysvc.com/), [Altair Capital](https://www.altair-cap.com/) and some incredible angels to build up our team. This money will ensure that issues and bugs can be addressed on time and take on more ambitious features.\n\nRest assured that nothing is changing about the way we do things - Dendron will remain open source and the client will always be local first and free. We plan to make money by charging teams and enterprises who want access to additional features like single sign-on, private registries and fine-grained access control.\n\nAs part of our growth from a project to a company, we are also publishing the [Dendron Handbook](https://handbook.dendron.so/). This is **heavily inspired** from the [Gitlab Handbook](https://about.gitlab.com/handbook/) and will document our mission, values, and roadmap as a company.\n\nFrom day one, the words of Vannevar Bush, originator of the [memex](https://en.wikipedia.org/wiki/Memex), has been our north star\n\n> \"We are overwhelmed with information and we don't have the tools to properly index and filter through it. [The development of these tools, which] will give society access to and command over the inherited knowledge of the ages [should] be the first objective of our scientist\" - Vannevar Bush, 1945\n\nOur goal is to help humans take **command over the inherited knowledge of the ages**. We welcome you to be part of our journey :)\n\n(and we are [hiring](https://wiki.dendron.so/notes/c378b702-7d49-4e91-be6e-b2078103c86e.html))\n\n---\n\n![[blog.subscribe]]","n":0.043}}},{"i":10,"$":{"0":{"v":"2020","n":1}}},{"i":11,"$":{"0":{"v":"A Hierarchy First Approach to Note Taking","n":0.378},"1":{"v":"\n![A tree with many branches in full bloom](https://kevinslin-images.s3.us-west-2.amazonaws.com/images/tree.jpeg)\n\nTen years ago I wrote a note. \n\nThat led to **another**, and then **another**, and soon enough, I had a **few thousand** of them and an increasingly unhappy dropbox client that refused to sync it all.\n\nThe reason for all these notes is because of technology. \n\nI worked at AWS and tried to keep on top of **cloud stuff**. I programmed in three different languages and kept notes to help me context switch between different **programming languages**. I also did full-stack development on the side and that, well, it required referencing **[everything](https://www.reddit.com/r/webdev/comments/747hfu/does_everybody_find_the_modern_fullstack_learning/)**. \n\nMy primary use for notes is as a [cache](https://en.wikipedia.org/wiki/Cache_(computing)). Think [Redis](https://redis.io/), but for humans. \n\nIf I spent **more than 5 minutes** figuring something out, those are five minutes I **never** want to spend again figuring out the **same problem**.\n\nBut this is difficult to do in practice. \n\nSometimes you run into a thing that only pops up on some specific version of a cli command on an outdated bash shell on a specific Linux distro. How do you document this sort of thing when you might encounter a dozen of them a day?\n\nMy solution is something I call **hierarchical note taking**. It's a system I've developed over the past ten years that has allowed me to amass a corpus of +10k notes. \n\nThis system has some awesome properties that I haven't been able to replicate with anything else:\n\n- it lets me **find any specific note within seconds** even with thousands of existing notes\n- it helps me build a **comprehensive mental model** around a domain through the act of organizing my notes\n- it **can be used on any note-taking tool that supports markdown notes** \n- it's compatible with existing note-taking methodologies like [PARA](https://fortelabs.co/blog/para/)\n\nThe rest of this post will describe the journey I took to arrive at hierarchical note-taking and the problems that they help me solve.\n\n## The Problem with CLIs\n\nI spend a lot of time in the command line in Unix-like systems. If you do as well, you might be familiar with the following comic.\n\n![tar bomb](https://kevinslin-images.s3.us-west-2.amazonaws.com/images/2020-06-09-15-11-27.png)\n> Comic from [XKCD](https://xkcd.com/)\n\nI've probably used `tar` a few thousand times in my life but still can't tell you what the arguments mean (it's mostly muscle memory at this point). Unix tools do one thing and one thing well, and on most days, that one thing is making you reach for a [man page](https://en.wikipedia.org/wiki/Man_page). \n\nThis is because every command has many dozen options, many of which are invoked with obscure single character letters in a specific order for specific inputs (I'm looking at you `rsync`).\n\nGrowing tired of reading man pages and stack overflow threads, I wanted a way to capture and reference commands that I've run in the past. And so I started taking notes. \n\nI created a folder called `notes`. I created a note called `tar.md`. \n\n![creating a tar folder](https://kevinslin-images.s3.us-west-2.amazonaws.com/images/2020-12-14-09-59-50.png)\n\nNote that my `tar.md` note doesn't have every option or use case involving `tar`. Instead, it's only the options that I find most useful and use cases that I've had to do. This tends to be my approach to note-taking - I like to capture the bare minimum information I need so that the future me can get value out of the note.\n\nWhat started as a single markdown file quickly spawned a few hundred more. It was exhilarating - instead of turning to google every time I ran into a dusty corner of Linux, I could just reference my notes. 95% of the time, there would be a nicely summarized note waiting for me :) \n\n## The Problem with Languages\n\nWhile the above approach worked for cli commands, things got more complicated as I needed notes on additional domains. Most commonly with my work, it was programming languages. \n\nTake [python](https://www.python.org/) as an example. Python is both a **programming language** as well as a **cli command**. Without changing the name of one of the notes or introducing folders, there would be no way to create notes on both. \n\nBut I didn't want folders. Folders were messy and besides, weren't supported in [notational velocity](http://notational.net/), my primary note-taking tool at the time. So instead of folders, I decided to create a hierarchy using the `.` symbol as my delimiter. \n\nNow I could represent the language and the cli as two different `.` delimited hierarchies.\n\n```\ncli.python.md\nlang.python.md\n```\n\nThough on the surface, this seems like a simple change and not all that different from a traditional folder hierarchy, I found that it equal to the difference between using a [commodore 64](https://en.wikipedia.org/wiki/Commodore_64) and the latest (non-[butterfly keyboard](https://www.theverge.com/2020/5/4/21246223/macbook-keyboard-butterfly-magic-pro-apple-design)) Macbook. \n\nFor starters, files now had the ability to both contain data and have children. They could act as both files and folders. \n\nAnd whereas folders were traditionally used to **organize** information, there was no straightforward way to use a folder hierarchy to quickly **find** information. Having the hierarchy in the filename made it easy to **find** information using the **hierarchy**. \n\n![cli lookup](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/lookup-cli.gif)\n\n## Finding the Truth\n\nThere's the joke in computer science that there are only 3 meaningful quantities in the field: 0, 1 or infinite. If you can create a thing more than once, there is nothing in theory that should stop you from creating an infinite amount of said thing. \n\nOnce I realized I had a system of making two-level hierarchies, I realized I didn't need to stop there. This soon led to deeper hierarchies like the one below.\n\n```\n.\n└── lang\n    └── python\n        ├── data\n        │   ├── boolean\n        │   ├── array\n        │   ├── string\n        │   └── flow\n        ├── flow\n        │   ├── for\n        │   ├── while\n        │   └── if\n        └── operator\n            ├── comment\n            ├── compare\n            ├── scope\n            ├── inspect\n            ├── format\n            ├── iterate\n            └── destructure\n```\n\nThe above hierarchy was stored as simple plain text files inside my `notes` folder.\n\n```\nlang.python.data.boolean.md\nlang.python.data.array.md\nlang.python.data.string.md\nlang.python.flow.md\nlang.python.flow.for.md\nlang.python.flow.while.md\nlang.python.flow.if.md\nlang.python.operator.md\nlang.python.operator.comment.md\nlang.python.operator.compare.md\nlang.python.operator.scope.md\nlang.python.operator.inspect.md\nlang.python.operator.format.md\nlang.python.operator.iterate.md\nlang.python.operator.destructure.md\n```\n\nWith this hierarchy, I could quickly reference anything I needed from a programming language. \n\n![python data structure lookup](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/blog.python.lookup.gif)\n> Looking up different data structures in python\n\nOnce I built out my hierarchy on `python`, I found that I could also apply it to any other language. This made context switching between languages much easier. \n\nAs an example, I can never remember what counts as `truthy` in dynamic languages. But now I don't have to. \n\n![finding the truth](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/blog.lookup.bool.gif)\n> Finding the truth\n\nThe cool thing about this approach is that the implementation details of any particular language became less important as I build out my hierarchies. Instead of thinking in terms of \"how well do I understand **python**\", I think in terms of how well I understand **programming languages**.\n\n## Externalizing Mental Models\n\nAs I started building hierarchies across more and more domains, I found that it became useful to document what they were. I called these *externalized hierarchies* **schemas**. They were a table of contents for a particular hierarchy. I started adding a special `schema` file directly underneath the root of each hierarchy. \n\n```\nlang.schema.md\ncli.schema.md\naws.schema.md\n...\n```\n\nInside each `schema` note, I would have something like the following\n\n```\n- lang (namespace) # indicates that there are any number of languages underneath here\n    - data: data structures\n    - flow: control flow\n    - oo: object-oriented programming\n    - ...\n```\n\nI would use schemas as a common source of truth when building out a hierarchy and use them to make sure that each hierarchy was internally consistent. As I began to use this system day by day, I realized that I had stumbled upon a radically more effective way of learning.\n\n## Hierarchical Notes\n\nBy associating every note I took to a hierarchy, I found that looking up information no longer felt like an **tax on my time**, but instead, a **path to self augmentation**. \n\nWhereas before I would look up a thing only to forget it a few weeks later, I could now quickly incorporate it into my notes and **know with certainty** that I will be able to **reference this again** at a later date. \n\nBetter yet, when I found something that didn't fit any of my existing hierarchies, I could use it as a chance to update my schemas on said hierarchies. This would slowly expand my conceptual understanding of the entire domain. \n\nA concrete example: earlier this year, I ended up making use of the [null coalescing operator](https://en.wikipedia.org/wiki/Null_coalescing_operator) in javascript. This is a convenient way of assigning values when dealing with `null`\n\nIn the following example, `a` will be assigned the value of `b` if the value of `b` is not `null` or `undefined`, otherwise, it will be assigned 3.\n\n```js\nconst a = b ?? 3;\n```\n\nAfter learning about it, I added it to my language schema under `operators`.\n\n```\n- lang (namespace)\n    - {specific language}\n        - operator (alias: op)\n            - add\n            - subtract\n            - ...\n            - null # null coalescing operator\n```\n\nNot only did this expand my vocabulary of language operators, but it also let me note down how the equivalent functionality can be expressed in languages that did not natively support it.\n\n```py\nother = s or \"some default value\"\n```\n> Python example of \"null coalescing\"\n\n\nWhat is nice about this approach is that I have completely divorced the concept of \"null coalescing\" with the implementation detail of any particular language. The next time I'm using python and want to do `null coalescing`, I can simply look up `python.op.null` and be reminded of the implementation.\n\nThere are dozens of **main stream** programming languages. There are hundreds of additional domain-specific languages. In a prior life, there would have been no way for me to **know** even a tiny fraction of them. But a hierarchical first approach to note-taking changes the game - instead of having to know the details of **every** language, I can collapse it all down to my **one language schema**. This schema can capture the points of interest of **every language** and in this way, I can claim to **know** something of all programming languages. \n\n## The Present Day\n\nToday, my knowledge base encompasses over a dozen different hierarchies that span 10K+ notes. I've expanded my use cases of note-taking beyond caching to also include journaling, task management, creating writing, keeping track of interactions, and lots more. \n\n![journal notes](https://pbs.twimg.com/media/EffzLiXVoAAjE5F?format=png&name=medium)\n> My journal notes for the last five years.\n\nI've also expanded my schemas and have migrated from free form bullets to a structured `YAML` syntax. \n\n```yml\nversion: 1\nschemas:\n- id: l\n  title: language\n  desc: programming language\n  parent: root\n  data:\n    namespace: true\n  children:\n    - operator\n    - d\n    - flow\n    - lib\n    - dev\n    - t\n    - files\n    - oo\n    - func\n    - types\n# --- operator\n- id: operator\n  children:\n    - comment\n    - create\n    - compare\n    - equal\n    - scope\n    - inspect\n    - format\n    - iterate\n    - destructure\n...\n```\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/lang.schema.jpg)\n> My programming language schema\n\nHierarchical note-taking has been the most valuable investment I've made in the last decade. My notes, in turn, have helped me learn, grow, and be better in all areas of my life.\n\nOne thing that has puzzled me over the years is why no one else was doing this. Most of my peers did no kind of note-taking, and the ones that did were constantly switching between different tools and methodologies to try to manage it all. \n\nA little over a year ago, I left my job at Amazon to work on a note-taking tool built around the concept of hierarchical notes. Hierarchical note-taking is a system that I spent the greater part of a decade iterating on, and it is now a system that I want to share with the world. \n\n## Dendron\n\nAbout a month ago, I launched the preview for [Dendron](https://dendron.so/). Dendron is the first-ever note-taking tool built from the ground up to support hierarchical note-taking. Dendron is open source, local first, Markdown-based, and runs as a collection of extension on top of VSCode.\n\nDendron lives inside VSCode because I wanted to move fast and focus on the truly novel parts of hierarchical notes without also building all the scaffolding that comes from creating an editor. Living inside VSCode means that users also have access to the thousands of existing extensions that provide everything from [vim keybindings](https://marketplace.visualstudio.com/items?itemName=vscodevim.vim) to [realtime collaboration editing](https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare). \n\nOver 50 years ago, [Vannevar Bush](https://en.wikipedia.org/wiki/Vannevar_Bush), an early visionary in information science, said something about the field that strikes a deep chord with me.\n\n> \"We are overwhelmed with information and we don't have the tools to properly index and filter through it. [The development of these tools, which] will give society access to and command over the inherited knowledge of the ages [should] be the first objective of our scientist\" - Vannevar Bush, 1945\n\n50 years later, this statement is just as true. The tools haven't changed but the information has only become more overwhelming.\n\nDendron is my attempt at building a tool that will give humans **access to** and **command over** the **inherited knowledge of the ages**.\n\nIf this mission statement resonates, I hope you join me on the journey! There are many ways to be involved:\n\n- you can [download dendron](https://marketplace.visualstudio.com/items?itemName=dendron.dendron) and start/continue a note-taking habit\n- you can take a look at our [open road map](https://github.com/orgs/dendronhq/projects/1) and leave comments and thoughts\n- you can join our [discord](https://discord.gg/AE3NRw9) community of fellow note-takers \n- you can follow us on twitter at [@dendronhq](https://twitter.com/dendronhq)\n- you can star and watch us on [github](https://github.com/dendronhq/dendron)\n\nWhatever path you take, safe travels and hope you take note of the journey!\n\n---\n\n![[blog.subscribe]]","n":0.022}}},{"i":12,"$":{"0":{"v":"Changelog","n":1}}}]}
